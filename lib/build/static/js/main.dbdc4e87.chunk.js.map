{"version":3,"sources":["app-bar-container.js","config.js","post-container/tree-view.js","post-container/post-details.js","post-container/post-container.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","AppBarContainer","classes","className","AppBar","position","Toolbar","Typography","variant","height","maxWidth","TreeViewContainer","fileTree","onSelectNode","applicationConfig","nodesId","expandParent","map","tree","name","length","style","backgroundColor","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","renderTreeNode","nodes","node","type","children","displayLabel","initialNumberPart","split","removeIndex","isNaN","parseInt","replace","err","console","log","TreeItem","nodeId","label","onClick","ReactMarkdown","require","PostDetails","content","selectedNode","useEffect","window","scrollTo","paddingLeft","paddingBottom","PostContainer","useState","setFileTree","setApplicationConfig","setSelectedNode","axios","get","then","response","data","catch","error","Grid","container","direction","justify","alignItems","item","md","sm","xs","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbdc4e87.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { appTitle } from './config';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nexport default function AppBarContainer() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography variant='h6' className={classes.title}>\n            {appTitle}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","export const appTitle = \"K8s Study Notes\";\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst useStyles = makeStyles({\n  root: {\n    height: 240,\n    flexGrow: 1,\n    maxWidth: 400\n  }\n});\n\nexport default function TreeViewContainer({ fileTree = [], onSelectNode, applicationConfig = {} }) {\n  const classes = useStyles();\n\n  const renderTreeNode = nodes =>\n    nodes.map(node => {\n      const { type, name, children } = node;\n      let displayLabel = name;\n      try {\n        const initialNumberPart = name.split(' ')[0];\n        if (applicationConfig.removeIndex && !isNaN(parseInt(initialNumberPart))) {\n          displayLabel = name.replace(initialNumberPart, '');\n        }\n      } catch (err) {\n        console.log('invalid name pattern');\n        console.log('name: ', name);\n        console.log({ fileTree });\n      }\n      return (\n        <TreeItem\n          style={{ backgroundColor: '#b9c3ff' }}\n          nodeId={name}\n          label={displayLabel}\n          onClick={() => type === 'file' && onSelectNode(node)}\n        >\n          {children ? renderTreeNode(children) : null}\n        </TreeItem>\n      );\n    });\n\n  const nodesId = applicationConfig.expandParent ? (fileTree || []).map(tree => tree.name) : [];\n\n  return (fileTree || []).length ? <div style={{ height: '100vh', backgroundColor: '#b9c3ff' }}>\n    <TreeView\n      defaultExpanded={nodesId}\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {renderTreeNode(fileTree)}\n    </TreeView>\n  </div> : null\n}\n","import React, { useEffect } from 'react';\nconst ReactMarkdown = require('react-markdown');\n\nfunction PostDetails({ selectedNode }) {\n  const { content } = selectedNode;\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  return (\n    <div style={{ height: \"100%\", paddingLeft: '15px', paddingBottom: '15px' }}>\n      <ReactMarkdown>{content}</ReactMarkdown>\n    </div>\n  );\n}\n\nexport default PostDetails;\n","import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport TreeViewContainer from \"./tree-view\";\nimport PostDetails from \"./post-details\";\nimport axios from \"axios\";\n\nfunction PostContainer() {\n  const [fileTree, setFileTree] = useState([]);\n  const [applicationConfig, setApplicationConfig] = useState({});\n  const [selectedNode, setSelectedNode] = useState({});\n\n  const onSelectNode = (node) => {\n    window.scrollTo(0, 0);\n    setSelectedNode(node);\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"/tree.json\")\n      .then(function (response) {\n        setFileTree(response.data || {});\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    axios\n      .get(\"/config.json\")\n      .then(function (response) {\n        setApplicationConfig(response.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"flex-start\"\n      style={{ height: \"100%\" }}\n    >\n      <Grid item md={3} sm={3} xs={3} style={{ height: \"100%\" }}>\n        <TreeViewContainer\n          applicationConfig={applicationConfig}\n          fileTree={fileTree}\n          onSelectNode={onSelectNode}\n        />\n      </Grid>\n      <Grid item md={9} sm={9} xs={9} style={{ height: \"100%\" }}>\n        <PostDetails selectedNode={selectedNode} />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default PostContainer;\n","import React from 'react';\nimport AppBarContainer from './app-bar-container';\nimport PostContainer from './post-container/post-container';\n\nfunction App() {\n  return (\n    <div>\n      <AppBarContainer />\n      <PostContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}